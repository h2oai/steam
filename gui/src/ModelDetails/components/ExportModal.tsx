/*
  Copyright (C) 2016 H2O.ai, Inc. <http://h2o.ai/>

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as
  published by the Free Software Foundation, either version 3 of the
  License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Affero General Public License for more details.

  You should have received a copy of the GNU Affero General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * Created by justin on 7/21/16.
 */
import * as React from 'react';
import DefaultModal from '../../App/components/DefaultModal';
import '../styles/exportmodal.scss';
import { fetchPackages } from '../../Deployment/actions/deployment.actions';
import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';

interface Props {
  name: string,
  open: boolean,
  onDownload: Function,
  onCancel: Function,
  modelId: number,
  modelObjectType: string,
  projectId: number,
  packages: string[]
}

interface DispatchProps {
  fetchPackages: Function
}

export class ExportModal extends React.Component<Props & DispatchProps, any> {
  refs: {
    [key: string]: Element
    packageSelect: Element
  };

  constructor() {
    super();
    this.state = {
      artifact: 'java-class',
      packageName: ''
    };
  }

  componentWillMount() {
    this.props.fetchPackages(this.props.projectId);
  }

  selectArtifact(event) {
    if (event.target === this.refs.packageSelect) {
      this.setState({
        packageName: event.target.value
      });
    } else {
      this.setState({
        artifact: event.target.value
      });
    }
  }

  onCancelClicked = (e: React.MouseEvent<any>) => {
    this.props.onCancel();
  };

  render(): React.ReactElement<DefaultModal> {
    return (
      <DefaultModal className="export-modal" open={this.props.open}>
        <header>
          EXPORT {this.props.name}
        </header>
        <section>
          <form onSubmit={this.props.onDownload.bind(this)} onChange={this.selectArtifact.bind(this)}>
            <div className="form-option">
              <div>
                <span>FILE FORMAT</span>
              </div>
              <div>
                <fieldset>
                  <input type="radio" value="java-class" name="downloadOption"
                         checked={this.state.artifact === 'java-class'}
                         onChange={this.selectArtifact.bind(this)}/>
                  { this.props.modelObjectType === "mojo" ?
                    <label><span className="file-extension">.zip</span><span>new MOJO format, faster scoring and smaller</span></label> :
                    <label><span className="file-extension">.java</span><span>a POJO generated by H2O</span></label>}
                </fieldset>
                <fieldset>
                  <input type="radio" value="java-jar" name="downloadOption"
                         checked={this.state.artifact === 'java-jar'}
                         onChange={this.selectArtifact.bind(this)}/><label><span
                  className="file-extension">.jar</span><span>a library file, can be used by java apps</span></label>
                </fieldset>
                <fieldset>
                  <input type="radio" value="java-war" name="downloadOption"
                         checked={this.state.artifact === 'java-war'}
                         onChange={this.selectArtifact.bind(this)}/><label><span
                  className="file-extension">.war</span><span>a java-based web app, can be used by Jetty / Tomcat</span></label>
                </fieldset>
              </div>
            </div>
            <div className="form-option">
              <div>
                <span>ADVANCED OPTIONS</span>
              </div>
              <div>
                <div>Choose a preprocessing script package</div>
                <div className="package-select">
                  <select ref="packageSelect">
                    <option value="">None (Default)</option>
                    {this.props.packages.map((script, i) => {
                      return <option key={i} value={script}>{script}</option>;
                    })}
                  </select>
                </div>
              </div>
            </div>
            <div className="form-option">
              <div></div>
              <div className="actions">
                <div>Steam defaults to your browser default Downloads Folders</div>
                <a
                  href={`/download?type=model&artifact=${this.state.packageName && this.state.artifact === 'java-war' ? 'java-py-war' : this.state.artifact}&model-id=${this.props.modelId}&project-id=${this.props.projectId}&package-name=${this.state.packageName}`}
                  className="default" target="_blank" rel="noopener">Download</a>
                <button type="button" className="default invert" onClick={this.onCancelClicked}>Cancel</button>
              </div>
            </div>
          </form>
        </section>
      </DefaultModal>
    );
  }
}

function mapStateToProps(state) {
  return {
    packages: state.deployments.packages
  };
}

function mapDispatchToProps(dispatch) {
  return {
    fetchPackages: bindActionCreators(fetchPackages, dispatch)
  };
}

export default connect<any, DispatchProps, any>(mapStateToProps, mapDispatchToProps)(ExportModal);
