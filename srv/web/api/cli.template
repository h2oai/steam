/*
  Copyright (C) 2016 H2O.ai, Inc. <http://h2o.ai/>

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as
  published by the Free Software Foundation, either version 3 of the
  License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Affero General Public License for more details.

  You should have received a copy of the GNU Affero General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

// ------------------------------
// --- This is generated code ---
// ---      DO NOT EDIT       ---
// ------------------------------
package cli2

import (
  "github.com/spf13/cobra"
  "log"
  "fmt"
)

{{- define "call"}}
      // {{.Help}}
      {{range .Outputs}}{{lower .Name}}, {{end}}err := c.remote.{{.Name}}(
      {{- range .Inputs}}
        {{lower .Name}}, // {{.Help}}
      {{- end}}
      )
      if err != nil {
        log.Fatalln(err)
      }

      {{- range $i, $o := .Outputs}}
      {{- if .IsStruct}}
      {{- if .IsArray}}
      lines := make([]string, len({{lower .Name}}))
      for i, e := range {{lower .Name}} {
        lines[i] = fmt.Sprintf(
          {{- with .Struct}}
          "{{range .Fields}}{{.Format}}\t{{end}}",
          {{- range .Fields}}
          e.{{.Name}}, // {{.Help}}
          {{- end}}
          {{- end}}
        )
      }
      {{- with .Struct}}
      c.printt("{{range .Fields}}{{.Name}}\t{{end}}", lines)
      {{- end}}
      {{- else}}
      {{- with .Struct}}
      lines := []string{
        {{- range .Fields}}
        fmt.Sprintf("{{.Name}}:\t{{.Format}}\t", {{lower $o.Name}}.{{.Name}}), // {{.Help}}
        {{- end}}
      }
      {{- end}}
      c.printt("Attribute\tValue\t", lines)
      {{- end}}
      {{- else}}
      {{- if .IsArray}}
      fmt.Printf("{{$o.Name}}:\t%v\n", {{lower $o.Name}})
      {{- else}}
      fmt.Printf("{{$o.Name}}:\t{{.Format}}\n", {{lower $o.Name}})
      {{- end}}
      {{- end}}
      {{- end}}
      return
{{- end}}

// registerGeneratedCommands appends generated commands to the
//   supplied Cobra context.
func registerGeneratedCommands(c *context, cmd *cobra.Command) {
  cmd.AddCommand(
  {{- range .}}
    {{.Func}}(c),
  {{- end}}
  )
}

{{range .}}

var {{.Verb}}Help = `
{{.Verb}} [?]
{{.Help}}
Commands:
{{range .Variants}}
    $ steam {{.Verb}} {{.Noun}} ...{{end}}
`
func {{.Func}}(c *context) *cobra.Command {
  cmd := newCmd(c, {{.Verb}}Help, nil)
{{range .Variants}}
  cmd.AddCommand({{.Verb}}{{upper .Noun}}(c)){{end}}
  return cmd
}

{{range .Variants}}
var {{.Verb}}{{upper .Noun}}Help = `
{{.Noun}} [?]
{{.Help}}
Examples:
{{range .Methods}}
    {{.Help}}
    $ steam {{.Verb}} {{.Noun}}{{if .HasFlag}} --{{.Flag}}{{end}}{{range .Args}} \
        --{{.}}=?{{end}}
{{end}}
`

func {{.Verb}}{{upper .Noun}}(c *context) *cobra.Command {
  {{- range .Methods}}
  {{- if .HasFlag}}
  var {{lower .Switch}} bool // Switch for {{.Method.Name}}()
  {{- end}}
  {{- end}}
  {{- range .Inputs}}
  var {{lower .Name}} {{.Type}} // {{.Help}}
  {{- end}}

  cmd := newCmd(c, {{.Verb}}{{upper .Noun}}Help, func(c *context, args []string) {
    {{- if .HasFlag}}
    {{- range .Methods}}
    {{- if .HasFlag}}
    if {{lower .Switch}} { // {{.Method.Name}}
      {{template "call" .Method}}
    }
    {{- end}}
    {{- end}}
    {{- range .Methods}}
    {{- if .HasFlag}}{{else}}
    if true { // default
      {{template "call" .Method}}
    }
    {{- end}}
    {{- end}}
    {{- else}}
    {{- range .Methods}}
    {{template "call" .Method}}
    {{- end}}
    {{- end}}
  })
  {{range .Methods}}{{if .HasFlag}}cmd.Flags().BoolVar(&{{lower .Switch}}, "{{flag .Switch}}", {{lower .Switch}}, "{{.Help}}")
  {{end}}{{end}}
  {{range .Inputs}}
  cmd.Flags().{{upper .Type}}Var(&{{lower .Name}}, "{{flag .Name}}", {{lower .Name}}, "{{.Help}}"){{end}}
  return cmd
}
{{end}}

{{end}}
