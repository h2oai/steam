/*
  Copyright (C) 2016 H2O.ai, Inc. <http://h2o.ai/>

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as
  published by the Free Software Foundation, either version 3 of the
  License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Affero General Public License for more details.

  You should have received a copy of the GNU Affero General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

// ------------------------------
// --- This is generated code ---
// ---      DO NOT EDIT       ---
// ------------------------------

{{- define "typeOf"}}{{if .IsArray}}[]{{end}}{{if .IsStruct}}*{{end}}{{.Type}}{{end}}

package web

import (
  "encoding/json"
  "github.com/h2oai/steam/master/az"
  "github.com/rs/xid"
  "log"
  "net/http"
)

// --- Types ---

{{$s := .Structs}}
{{- range .Structs}}
type {{.Name}} struct {
{{- range .Fields}}
  {{.Name}} {{template "typeOf" .}} `json:"{{snake .Name}}"`
{{- end}}
}
{{end}}

// --- Interface ---

type Az interface {
	Identify(r *http.Request) (az.Principal, error)
}

{{- with .Facade}}
type {{.Name}} interface {
  {{- range .Methods}}
  {{.Name}}(pz az.Principal{{range .Inputs}}, {{lower .Name}} {{template "typeOf" .}}{{end}}) ({{range .Outputs}}{{template "typeOf" .}}, {{end}}error)
  {{- end}}
}
{{- end}}


// --- Messages ---

{{- with .Facade}}
{{- range .Methods}}
type {{.Name}}In struct {
  {{- range .Inputs}}
  {{.Name}} {{template "typeOf" .}} `json:"{{snake .Name}}"`
  {{- end}}
}

type {{.Name}}Out struct {
  {{- range .Outputs}}
  {{.Name}} {{template "typeOf" .}} `json:"{{snake .Name}}"`
  {{- end}}
}
{{end}}
{{- end}}


// --- Client Stub ---

type Remote struct {
	Proc Proc
}

type Proc interface {
	Call(name string, in, out interface{}) error
}

{{- with .Facade}}
{{- range .Methods}}
func (this *Remote) {{.Name}}({{range $i, $e := .Inputs}}{{if $i}}, {{end}}{{lower .Name}} {{template "typeOf" .}}{{end}}) ({{range .Outputs}}{{template "typeOf" .}}, {{end}}error) {
  in := {{.Name}}In{ {{range $i, $e := .Inputs}}{{if $i}}, {{end}}{{lower .Name}} {{end}} }
  var out {{.Name}}Out
  err := this.Proc.Call("{{.Name}}", &in, &out)
  if err != nil {
    return {{range .Outputs}}{{.DefaultValue}}, {{end}}err
  }
  return {{range .Outputs}}out.{{.Name}}, {{end}}nil
}
{{end}}
{{- end}}


// --- Server Stub ---

type Impl struct {
	Service Service
	Az      az.Az
}

{{- with .Facade}}
{{- range .Methods}}
func (this *Impl) {{.Name}}(r *http.Request, in *{{.Name}}In, out *{{.Name}}Out) error {
  const name = "{{.Name}}"

  guid := xid.New().String()

	pz, azerr := this.Az.Identify(r)
	if azerr != nil {
		return azerr
	}

  req, merr := json.Marshal(in)
  if merr != nil {
    log.Println(guid, "REQ", pz, name, merr)
  } else {
    log.Println(guid, "REQ", pz, name, string(req))
  }

	{{range $i, $e := .Outputs}}val{{$i}}, {{end}}err := this.Service.{{.Name}}(pz{{range .Inputs}}, in.{{.Name}}{{end}})
	if err != nil {
		log.Println(guid, "ERR", pz, name, err)
		return err
	}
  {{range $i, $e := .Outputs}}
	out.{{.Name}} = val{{$i}} 
  {{end}}

  {{/*  Really ugly way of removing JSON:
        First: Check if has outputs (1 generic out)
        Second: Check if is a struct (1 generic out)
        Third: Handle JSON differently if is an array or not (1 generic out each)

        At each step, a "resp, err..."" must be printed, a total of four with out are used
        and two with the aux struct
    */}}
  {{- range .Outputs}}
    {{- if .IsStruct}}{{- $t := .Type}}
      {{- $n := .Name}}
      {{- if .IsArray}}
        {{- with index $s .Type}}
          {{- if .HasJSON}}
            {{- range .Fields}}
              {{- if startswith .Name `JSON`}}
  aux := make([]{{$t}}, len(out.{{$n}}))
  for i, val := range out.{{$n}} {
    aux[i] = *val
    aux[i].{{.Name}} = "JSON DATA OMITTED..."
    }
              {{- end}}
            {{- end}}

  res, merr := json.Marshal(aux)
          {{- else}}

  res, merr := json.Marshal(out)
          {{- end}}
        {{- end}}
      {{- else}}
        {{- with index $s .Type}}
          {{- if .HasJSON}}
            {{- range .Fields}}
              {{- if startswith .Name `JSON`}}
  aux := *out.{{$n}}
  aux.{{.Name}} = "JSON DATA OMITTED..."
               {{- end}}
            {{- end}}

  res, merr := json.Marshal(aux)
          {{- else}}

  res, merr := json.Marshal(out)
          {{- end}}
        {{- end}}
      {{- end}}
    {{- else}}

  res, merr := json.Marshal(out)
    {{- end}}
  {{- else}}

  res, merr := json.Marshal(out)
  {{- end}}
  if merr != nil {
    log.Println(guid, "RES", pz, name, merr)
  } else {
    log.Println(guid, "RES", pz, name, string(res))
  }

	return nil
}
{{end}}
{{- end}}

